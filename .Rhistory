)
analytic <- analytic |>
mutate(
WBC_cat = case_when(
is.na(WBC) ~ "Not Taken",
WBC < 3.2  ~ "Low (<3.2)",
WBC <= 9.8 ~ "Normal (3.2–9.8)",
WBC > 9.8  ~ "High (>9.8)"
),
# ensure logical order (not alphabetical)
WBC_cat = factor(WBC_cat,
levels = c("Low (<3.2)", "Normal (3.2–9.8)", "High (>9.8)", "Not Taken"))
)
# 确保逻辑顺序（避免按字母排序）
analytic <- analytic |>
mutate(
WBC_cat = factor(
WBC_cat,
levels = c("Low (<3.2)", "Normal (3.2–9.8)", "High (>9.8)", "Not Taken")
)
)
# 统计 counts 与 %
wbc_table <- analytic |>
count(WBC_cat, name = "Count") |>
mutate(Percent = round(100 * Count / sum(Count), 1))
# 学术风格三线表
knitr::kable(
wbc_table,
caption = "Table A. Counts (%) of Encounters within Each WBC Category",
booktabs = TRUE,
align = "lcc"
) |>
kableExtra::kable_styling(full_width = FALSE, position = "center")
# 确保是分类变量，table1 才会输出 n (%)
patient_clean_tbl1 <- patient_clean |>
mutate(
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass),
hypertension   = factor(hypertension, levels = c("No","Yes")),
CHF            = factor(CHF,          levels = c("No","Yes")),
diabetes       = factor(diabetes,     levels = c("No","Yes"))
)
# 一张“合并”的基线表（counts & %）
table1(
~ race + ethnicity + financialclass + hypertension + CHF + diabetes,
data    = patient_clean_tbl1,
overall = TRUE,
caption = "Table 1. Patient-level Counts and Percentages (Baseline Characteristics)"
)
# dir.create(here("outputs"), showWarnings = FALSE)
# write_csv(analytic, here("outputs", "analytic_dataset.csv"))
# 确保是分类变量，table1 才会输出 n (%)
patient_clean_tbl1 <- patient_clean |>
mutate(
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass),
hypertension   = factor(hypertension, levels = c("No","Yes")),
CHF            = factor(CHF,          levels = c("No","Yes")),
diabetes       = factor(diabetes,     levels = c("No","Yes"))
)
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# 把 Y/N 映射到 Yes/No（不做 0/1 假设）
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No","Yes")))
)
# 一张“合并”的基线表（counts & %）
table1(
~ race + ethnicity + financialclass + hypertension + CHF + diabetes,
data    = patient_clean_tbl1,
overall = TRUE,
caption = "Table 1. Patient-level Counts and Percentages"
)
# ---- Patient-level Table 1 ----
# Fix comorbidity encoding and make factors
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# Recode Y/N to Yes/No
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No", "Yes"))),
# Ensure categorical for demographics
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass)
)
# Create Table 1 with counts and percentages
table1(
~ race + ethnicity + financialclass +
hypertension + CHF + diabetes,
data = patient_clean,
caption = "Table 1. Patient-level Counts and Percentages (Baseline Characteristics)"
)
# 确保是分类变量，table1 才会输出 n (%)
patient_clean_tbl1 <- patient_clean |>
mutate(
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass),
hypertension   = factor(hypertension, levels = c("No","Yes")),
CHF            = factor(CHF,          levels = c("No","Yes")),
diabetes       = factor(diabetes,     levels = c("No","Yes"))
)
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# 把 Y/N 映射到 Yes/No（不做 0/1 假设）
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No","Yes")))
)
# 一张“合并”的基线表（counts & %）
table1(
~ race + ethnicity + financialclass + hypertension + CHF + diabetes,
data    = patient_clean_tbl1,
overall = TRUE,
caption = "Table 1. Patient-level Counts and Percentages"
)
# ---- Patient-level Table 1 ----
# Fix comorbidity encoding and make factors
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# Recode Y/N to Yes/No
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No", "Yes"))),
# Ensure categorical for demographics
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass)
)
# Create Table 1 with counts and percentages
table1(
~ race + ethnicity + financialclass +
hypertension + CHF + diabetes,
data = patient_clean,
caption = "Table 1. Patient-level Counts and Percentages (Baseline Characteristics)"
)
cat("Granularity: One row represents one patient encounter.\n")
cat("Number of encounters:", nrow(analytic), "\n")
cat("Number of variables:", ncol(analytic), "\n")
cat("Unique patients:", dplyr::n_distinct(analytic$MRN), "\n")
# Light typing / labels first
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = mdy(DOB),
hypertension = factor(hypertension, levels = c(0,1), labels = c("No","Yes")),
CHF          = factor(CHF,          levels = c(0,1), labels = c("No","Yes")),
diabetes     = factor(diabetes,     levels = c(0,1), labels = c("No","Yes"))
)
encounter_clean <- encounter |>
mutate(
MRN = as.character(MRN),
contact_date = mdy(contact_date),
enc_type = case_when(
str_detect(str_to_lower(enc_type), "office") ~ "Office visit",
TRUE ~ "ED/Hospitalization"
)
)
# Merge on MRN → one row per encounter
analytic <- encounter_clean |>
left_join(patient_clean, by = "MRN")
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
# Light typing / labels first
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = mdy(DOB),
hypertension = factor(hypertension, levels = c(0,1), labels = c("No","Yes")),
CHF          = factor(CHF,          levels = c(0,1), labels = c("No","Yes")),
diabetes     = factor(diabetes,     levels = c(0,1), labels = c("No","Yes"))
)
encounter_clean <- encounter |>
mutate(
MRN = as.character(MRN),
contact_date = mdy(contact_date),
enc_type = case_when(
str_detect(str_to_lower(enc_type), "office") ~ "Office visit",
TRUE ~ "ED/Hospitalization"
)
)
# Merge on MRN → one row per encounter
analytic <- encounter_clean |>
left_join(patient_clean, by = "MRN")
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
knitr::kable(
head(analytic, 10),
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc"
)
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
knitr::kable(
head(analytic, 10),
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc"
)
analytic <- analytic |>
mutate(
# DOB
DOB = if_else(!is.na(DOB) & year(DOB) < 1910, as.Date(NA), DOB),
# BMI
BMI.r = na_if(BMI.r, -999),
BMI.r = if_else(!is.na(BMI.r) & BMI.r < 10, 10, BMI.r),
BMI.r = if_else(!is.na(BMI.r) & BMI.r > 50, 50, BMI.r),
# WBC
WBC = if_else(!is.na(WBC) & WBC < 0.05, 0.05, WBC),
WBC = if_else(!is.na(WBC) & WBC > 50, 50, WBC),
# Temp & distress (optional but simple)
temp = if_else(!is.na(temp) & temp < 95, 95, temp),
temp = if_else(!is.na(temp) & temp > 105, 105, temp),
distress_score =
if_else(!is.na(distress_score) & distress_score < 0, 0, distress_score),
distress_score =
if_else(!is.na(distress_score) & distress_score > 10, 10, distress_score)
)
# ---- add this block right below ----
# Demonstrate that the data have been cleaned
clean_check <- tibble(
Variable = c("WBC", "BMI.r", "temp", "distress_score"),
Before_Min = c(min(encounter$WBC, na.rm = TRUE),
min(encounter$BMI.r, na.rm = TRUE),
min(encounter$temp, na.rm = TRUE),
min(encounter$distress_score, na.rm = TRUE)),
Before_Max = c(max(encounter$WBC, na.rm = TRUE),
max(encounter$BMI.r, na.rm = TRUE),
max(encounter$temp, na.rm = TRUE),
max(encounter$distress_score, na.rm = TRUE)),
After_Min = c(min(analytic$WBC, na.rm = TRUE),
min(analytic$BMI.r, na.rm = TRUE),
min(analytic$temp, na.rm = TRUE),
min(analytic$distress_score, na.rm = TRUE)),
After_Max = c(max(analytic$WBC, na.rm = TRUE),
max(analytic$BMI.r, na.rm = TRUE),
max(analytic$temp, na.rm = TRUE),
max(analytic$distress_score, na.rm = TRUE))
)
knitr::kable(
clean_check,
caption = "Comparison of Selected Variables Before and After Data Cleaning",
align = "lcccc"
)
analytic <- analytic |>
mutate(
# DOB
DOB = if_else(!is.na(DOB) & year(DOB) < 1910, as.Date(NA), DOB),
# BMI
BMI.r = na_if(BMI.r, -999),
BMI.r = if_else(!is.na(BMI.r) & BMI.r < 10, 10, BMI.r),
BMI.r = if_else(!is.na(BMI.r) & BMI.r > 50, 50, BMI.r),
# WBC
WBC = if_else(!is.na(WBC) & WBC < 0.05, 0.05, WBC),
WBC = if_else(!is.na(WBC) & WBC > 50, 50, WBC),
# Temp & distress (optional but simple)
temp = if_else(!is.na(temp) & temp < 95, 95, temp),
temp = if_else(!is.na(temp) & temp > 105, 105, temp),
distress_score =
if_else(!is.na(distress_score) & distress_score < 0, 0, distress_score),
distress_score =
if_else(!is.na(distress_score) & distress_score > 10, 10, distress_score)
)
# ---- add this block right below ----
# Demonstrate that the data have been cleaned
clean_check <- tibble(
Variable = c("WBC", "BMI.r", "temp", "distress_score"),
Before_Min = c(min(encounter$WBC, na.rm = TRUE),
min(encounter$BMI.r, na.rm = TRUE),
min(encounter$temp, na.rm = TRUE),
min(encounter$distress_score, na.rm = TRUE)),
Before_Max = c(max(encounter$WBC, na.rm = TRUE),
max(encounter$BMI.r, na.rm = TRUE),
max(encounter$temp, na.rm = TRUE),
max(encounter$distress_score, na.rm = TRUE)),
After_Min = c(min(analytic$WBC, na.rm = TRUE),
min(analytic$BMI.r, na.rm = TRUE),
min(analytic$temp, na.rm = TRUE),
min(analytic$distress_score, na.rm = TRUE)),
After_Max = c(max(analytic$WBC, na.rm = TRUE),
max(analytic$BMI.r, na.rm = TRUE),
max(analytic$temp, na.rm = TRUE),
max(analytic$distress_score, na.rm = TRUE))
)
knitr::kable(
clean_check,
caption = "Comparison of Selected Variables Before and After Data Cleaning",
align = "lcccc"
) |>
kableExtra::kable_styling(full_width = FALSE, position = "center")
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
knitr::kable(
head(analytic, 10),
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc"
)|>
kableExtra::kable_styling(full_width = FALSE, position = "center")
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
knitr::kable(
head(analytic, 10),
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc"
)|>
kableExtra::kable_styling(
full_width = FALSE,
position = "center",
font_size = 12) |>
scroll_box(width = "100%", height = "400px")
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
knitr::kable(
head(analytic, 10),
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc"
)|>
kableExtra::kable_styling(
full_width = FALSE,
position = "center",
font_size = 12) |>
scroll_box(width = "100%", height = "400px")
<div class="no-break" style="overflow-x:auto; width:100%;">
nrow(encounter)        # 原始 encounter 记录数
nrow(analytic)         # 合并后行数，应相同
names(analytic)        # 变量名，应该包含两表的列
knitr::kable(
head(analytic, 10),
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc"
)|>
kableExtra::kable_styling(
full_width = FALSE,
position = "center",
font_size = 12) |>
scroll_box(width = "100%", height = "400px")|<div class="no-break" style="overflow-x:auto; width:100%;">
# ---- Patient-level Table 1 ----
# Fix comorbidity encoding and make factors
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# Recode Y/N to Yes/No
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No", "Yes"))),
# Ensure categorical for demographics
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass)
)
# Create Table 1 with counts and percentages
table1(
~ race + ethnicity + financialclass +
hypertension + CHF + diabetes,
data = patient_clean,
caption = "Table 1. Patient-level Counts and Percentages (Baseline Characteristics)",
extra.cols = list()   # 默认空，防止多余列
) |>
htmltools::tagAppendAttributes(class = "t1-table"))
# ---- Patient-level Table 1 ----
# Fix comorbidity encoding and make factors
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# Recode Y/N to Yes/No
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No", "Yes"))),
# Ensure categorical for demographics
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass)
)
# Create Table 1 with counts and percentages
table1(
~ race + ethnicity + financialclass + hypertension + CHF + diabetes,
data = patient_clean,
overall = TRUE,
caption = "Table 1. Patient-level Counts and Percentages (Baseline Characteristics)",
extra.cols = list()   # 默认空，防止多余列
) |>
htmltools::tagAppendAttributes(class = "t1-table")
# ---- Patient-level Table 1 ----
# Fix comorbidity encoding and make factors
patient_clean <- patient |>
mutate(
MRN = as.character(MRN),
DOB = lubridate::mdy(DOB),
# Recode Y/N to Yes/No
across(c(hypertension, CHF, diabetes),
~ recode(as.character(.x),
"Y" = "Yes", "N" = "No",
.default = NA_character_)),
across(c(hypertension, CHF, diabetes),
~ factor(.x, levels = c("No", "Yes"))),
# Ensure categorical for demographics
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass)
)
# Create Table 1 with counts and percentages
table1(
~ race + ethnicity + financialclass +
hypertension + CHF + diabetes,
data = patient_clean,
caption = "Table 1. Patient-level Counts and Percentages (Baseline Characteristics)"
)
# ---- Preview merged analytic dataset ----
analytic |>
select(
MRN,              # patient ID
contact_date,     # encounter-level variable
enc_type,         # encounter-level variable
temp, WBC,        # clinical variables
BMI.r,            # continuous variable
race, ethnicity,  # patient-level demographic
financialclass    # patient-level socioeconomic
) |>
head(10) |>
knitr::kable(
caption = "Preview of Analytic Dataset (first 10 rows)",
align = "lcccccccc",
digits = 2
)
# 确保逻辑顺序（避免按字母排序）
analytic <- analytic |>
mutate(WBC_cat = factor(
WBC_cat,
levels = c("Low (<3.2)", "Normal (3.2–9.8)", "High (>9.8)", "Not Taken"))
)
# 确保分类变量
patient_tbl <- patient_clean |>
mutate(
race           = factor(race),
ethnicity      = factor(ethnicity),
financialclass = factor(financialclass),
# 合并症确保是 Yes/No（之前有 Y/N 的要先 recode）
hypertension   = factor(hypertension, levels = c("No","Yes")),
CHF            = factor(CHF,          levels = c("No","Yes")),
diabetes       = factor(diabetes,     levels = c("No","Yes"))
)
tbl1_gt <- tbl_summary(
data = patient_tbl,
include = c(race, ethnicity, financialclass, hypertension, CHF, diabetes),
statistic = all_categorical() ~ "{n} ({p}%)",  # 显示 n (%)
missing = "no"                                  # 不单列 Missing 行（可改为 "ifany"）
) |>
modify_caption("**Table 1. Patient-level Counts and Percentages (Baseline Characteristics)**")
# 保证 WBC 存在且是数值（有些导入为字符）
analytic <- analytic |>
mutate(WBC = suppressWarnings(as.numeric(WBC)))
# 创建并按逻辑顺序设为 factor（一步完成）
analytic <- analytic |>
mutate(
WBC_cat = factor(
case_when(
is.na(WBC) ~ "Not Taken",
WBC < 3.2  ~ "Low (<3.2)",
WBC <= 9.8 ~ "Normal (3.2–9.8)",
WBC > 9.8  ~ "High (>9.8)"
),
levels = c("Low (<3.2)", "Normal (3.2–9.8)", "High (>9.8)", "Not Taken")
)
)
library(flextable)
# WBC 表
wbc_table <- analytic |>
count(WBC_cat, name = "Count") |>
mutate(Percent = sprintf("%.1f%%", 100 * Count / sum(Count)))
knitr::kable(wbc_table, caption = "Table A. Counts (%) of Encounters within Each WBC Category",
align = "lcc", digits = 1)
# Table 1（如果你用 dplyr 拼好了数据框 tbl1_df）
knitr::kable(tbl1_df, caption = "Table 1. Patient-level Counts and Percentages",
col.names = c("Variable","Level","Count","Percent"),
align = "llcc", digits = 1)
